# This is a Makefile, which is used by the make utility to build and manage projects in C++. 
# It automates the process of compilation to avoid running the compiler commands manually every 
# time a source file is modified. The Makefile can also manage complex dependencies, ensuring 
# that only the necessary files are recompiled.

# specify the C++ compiler
CXX = g++

# specify flags for the C++ compiler
# This line is setting compiler flags. The -std=c++17 flag sets the C++ standard to C++17. 
# The -Wall flag turns on all compiler's warning messages. 
# This option is helpful for catching potential issues in your code. 
# The -MMD and -MP flags generate dependency files, which are used to track which source 
# files need to be recompiled when a given file changes.

CXXFLAGS = -std=c++17 -Wall -MMD -MP

# specify the directories
SRCDIR = src
OBJDIR = obj
BINDIR = bin

# specify the source and target file
# These lines are defining several variables that are used in the rest of the Makefile. 
# SRC is set to all .cpp files in the SRCDIR directory. 
# OBJ is a list of object files that will be created from the source files. 
# DEP is a list of dependency files that are created by the -MMD and -MP flags. 
# TARGET is the final executable that will be created.

SRC = $(wildcard $(SRCDIR)/*.cpp)
OBJ = $(SRC:$(SRCDIR)/%.cpp=$(OBJDIR)/%.o)
DEP = $(OBJ:$(OBJDIR)/%.o=$(OBJDIR)/%.d)
TARGET = $(BINDIR)/output

# default target
# This line is defining the default target for the make command. When you run make with no arguments, 
# it runs the all target. In this case, all depends on $(TARGET), which is defined in the next block.

all: $(TARGET)

# link
# This block defines how to create the $(TARGET) executable. It depends on all the object files in $(OBJ). 
# The commands in the block create the directory for the target if it doesn't exist (mkdir -p $(@D)) and 
# then run the compiler to link all object files ($(CXX) $(CXXFLAGS) $^ -o $@).
$(TARGET): $(OBJ)
	mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) $^ -o $@

# compile
# This block defines a pattern rule for creating .o files from .cpp files. 
# It creates the directory for the object file if it doesn't exist and 
# then compiles the source file to an object file.

$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# include the dependencies
# This line includes the dependency files that are generated by the -MMD and -MP flags. 
# Including the dependency files ensures that any time a header file is changed, 
# the source files that include it are recompiled.

-include $(DEP)

# clean
# This block defines a clean target that removes the object and binary directories. 
# This is often used to clean up the project before a full rebuild.
clean:
	$(RM) -r $(OBJDIR) $(BINDIR)

# .PHONY targets
# This line tells make that all and clean are not files. This is important because if there was a file 
# named all or clean in the same directory as the Makefile, make would not run these targets.

.PHONY: all clean
